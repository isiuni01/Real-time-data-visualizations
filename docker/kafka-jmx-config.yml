rules:
  # === THROUGHPUT METRICS (Critical for scaling analysis) ===
  
  # Messages in per second (producer throughput)
  - pattern: kafka.server<type=BrokerTopicMetrics, name=MessagesInPerSec, topic=(.+)><>OneMinuteRate
    name: kafka_messages_in_per_sec
    type: GAUGE
    labels:
      topic: "$1"
  
  # Bytes in per second (data ingestion rate)
  - pattern: kafka.server<type=BrokerTopicMetrics, name=BytesInPerSec, topic=(.+)><>OneMinuteRate
    name: kafka_bytes_in_per_sec
    type: GAUGE
    labels:
      topic: "$1"
  
  # Bytes out per second (consumer consumption rate)
  - pattern: kafka.server<type=BrokerTopicMetrics, name=BytesOutPerSec, topic=(.+)><>OneMinuteRate
    name: kafka_bytes_out_per_sec
    type: GAUGE
    labels:
      topic: "$1"
  
  # === LATENCY METRICS (Identify bottlenecks) ===
  
  # Producer request latency (time to process produce requests)
  - pattern: kafka.network<type=RequestMetrics, name=TotalTimeMs, request=Produce><>Mean
    name: kafka_produce_request_latency_ms
    type: GAUGE
  
  # Consumer fetch latency
  - pattern: kafka.network<type=RequestMetrics, name=TotalTimeMs, request=Fetch><>Mean
    name: kafka_fetch_request_latency_ms
    type: GAUGE
  
  # Request queue time (how long requests wait in queue)
  - pattern: kafka.network<type=RequestMetrics, name=RequestQueueTimeMs, request=(.+)><>Mean
    name: kafka_request_queue_time_ms
    type: GAUGE
    labels:
      request_type: "$1"
  
  # === QUEUE AND BUFFER METRICS (Scaling pressure indicators) ===
  
  # Request queue size (backlog indicator)
  - pattern: kafka.network<type=RequestChannel, name=RequestQueueSize><>Value
    name: kafka_request_queue_size
    type: GAUGE
  
  # Response queue size
  - pattern: kafka.network<type=RequestChannel, name=ResponseQueueSize><>Value
    name: kafka_response_queue_size
    type: GAUGE
  
  # Purgatory size (delayed operations - scaling issue indicator)
  - pattern: kafka.server<type=DelayedOperationPurgatory, name=PurgatorySize, delayedOperation=(.+)><>Value
    name: kafka_purgatory_size
    type: GAUGE
    labels:
      operation: "$1"
  
  # === PARTITION AND REPLICATION METRICS ===
  
  # Under replicated partitions (reliability indicator)
  - pattern: kafka.server<type=ReplicaManager, name=UnderReplicatedPartitions><>Value
    name: kafka_under_replicated_partitions
    type: GAUGE
  
  # Leader election rate (instability indicator)
  - pattern: kafka.controller<type=ControllerStats, name=LeaderElectionRateAndTimeMs><>OneMinuteRate
    name: kafka_leader_election_rate
    type: GAUGE
  
  # === CONSUMER LAG METRICS (Critical for boat data pipeline) ===
  
  # Consumer lag (per topic-partition)
  - pattern: kafka.server<type=FetcherLagMetrics, name=ConsumerLag, clientId=(.+), topic=(.+), partition=(.+)><>Value
    name: kafka_consumer_lag
    type: GAUGE
    labels:
      client_id: "$1"
      topic: "$2"
      partition: "$3"
  
  # Log size (total messages in topic-partition)
  - pattern: kafka.log<type=LogSize, name=Size, topic=(.+), partition=(.+)><>Value
    name: kafka_log_size
    type: GAUGE
    labels:
      topic: "$1"
      partition: "$2"
  
  # === NETWORK AND I/O METRICS ===
  
  # Network processor average idle percentage (CPU pressure)
  - pattern: kafka.network<type=SocketServer, name=NetworkProcessorAvgIdlePercent><>Value
    name: kafka_network_processor_avg_idle_percent
    type: GAUGE
  
  # Request handler average idle percentage (thread pool pressure)
  - pattern: kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>Value
    name: kafka_request_handler_avg_idle_percent
    type: GAUGE
  
  # === DISK I/O METRICS (Storage bottleneck detection) ===
  
  # Log flush rate and time
  - pattern: kafka.log<type=LogFlushStats, name=LogFlushRateAndTimeMs><>OneMinuteRate
    name: kafka_log_flush_rate
    type: GAUGE
  
  - pattern: kafka.log<type=LogFlushStats, name=LogFlushRateAndTimeMs><>Mean
    name: kafka_log_flush_time_ms
    type: GAUGE
  
  # === ERROR METRICS (Failure detection) ===
  
  # Failed produce requests
  - pattern: kafka.server<type=BrokerTopicMetrics, name=FailedProduceRequestsPerSec, topic=(.+)><>OneMinuteRate
    name: kafka_failed_produce_requests_per_sec
    type: GAUGE
    labels:
      topic: "$1"
  
  # Failed fetch requests
  - pattern: kafka.server<type=BrokerTopicMetrics, name=FailedFetchRequestsPerSec, topic=(.+)><>OneMinuteRate
    name: kafka_failed_fetch_requests_per_sec
    type: GAUGE
    labels:
      topic: "$1"
  
  # === BOAT-SPECIFIC METRICS (Topic-level monitoring) ===
  
  # Boat navigation topic specific metrics
  - pattern: kafka.server<type=BrokerTopicMetrics, name=(.+), topic=boat_data_navigation><>OneMinuteRate
    name: kafka_boat_navigation_$1_rate
    type: GAUGE
  
  # Boat race topic specific metrics
  - pattern: kafka.server<type=BrokerTopicMetrics, name=(.+), topic=boat_race_data><>OneMinuteRate
    name: kafka_boat_race_$1_rate
    type: GAUGE
  
  # === LEGACY PATTERNS (Keeping existing ones) ===
  
  # General broker metrics
  - pattern: kafka.server<type=(.+), name=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
  
  # General network metrics
  - pattern: kafka.network<type=(.+), name=(.+)><>Value
    name: kafka_network_$1_$2
    type: GAUGE
  
  # General controller metrics
  - pattern: kafka.controller<type=(.+), name=(.+)><>Value
    name: kafka_controller_$1_$2
    type: GAUGE
  
  # General log metrics
  - pattern: kafka.log<type=(.+), name=(.+)><>Value
    name: kafka_log_$1_$2
    type: GAUGE
  
  # Topic and partition metrics (general)
  - pattern: kafka.server<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      topic: "$3"
      partition: "$4"
  
  # Consumer group metrics (general)
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      client_id: "$3"
